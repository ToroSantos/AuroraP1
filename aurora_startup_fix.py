#!/usr/bin/env python3
"""
üöÄ AURORA STARTUP FIX - Arranque Controlado Inteligente
=====================================================

Script optimizado para el arranque del Sistema Aurora V7 refactorizado.
Controla inteligentemente el orden de inicializaci√≥n y registro de componentes,
verificando el estado antes de realizar acciones redundantes.

Versi√≥n: V7.1-Optimized
Autor: Sistema Aurora V7
Descripci√≥n: Arranque inteligente sin registros duplicados
"""

import sys
import logging
import time
from typing import Dict, Any, Optional, Tuple

# Configurar logging para debug
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("Aurora.Startup.Fix.Optimized")

def verificar_componente_registrado(factory, nombre: str) -> bool:
    """
    Verifica si un componente ya est√° registrado en el factory
    
    Args:
        factory: Instancia del aurora_factory
        nombre: Nombre del componente a verificar
        
    Returns:
        True si ya est√° registrado, False si no
    """
    try:
        # Verificar en los diferentes tipos de componentes
        motores = factory.listar_motores_disponibles()
        gestores = factory.listar_gestores_disponibles()
        analizadores = factory.listar_analizadores_disponibles()
        
        return (nombre in motores or 
                nombre in gestores or 
                nombre in analizadores)
    except Exception as e:
        logger.debug(f"Error verificando componente {nombre}: {e}")
        return False

def registrar_componente_inteligente(factory, nombre: str, tipo: str, 
                                   modulo: str, clase: str) -> bool:
    """
    Registra un componente solo si no est√° ya registrado
    
    Args:
        factory: Instancia del aurora_factory
        nombre: Nombre del componente
        tipo: Tipo (motor, gestor, analizador)
        modulo: Nombre del m√≥dulo
        clase: Nombre de la clase
        
    Returns:
        True si se registr√≥ o ya exist√≠a, False si fall√≥
    """
    
    # Verificar si ya est√° registrado
    ya_registrado = verificar_componente_registrado(factory, nombre)
    
    if ya_registrado:
        logger.debug(f"   {nombre}: ‚úÖ (ya registrado)")
        return True
    
    # Intentar registrar si no existe
    try:
        if tipo == "motor":
            success = factory.registrar_motor(nombre, modulo, clase)
        elif tipo == "gestor":
            success = factory.registrar_gestor(nombre, modulo, clase)
        elif tipo == "analizador":
            success = factory.registrar_analizador(nombre, modulo, clase)
        else:
            logger.warning(f"   {nombre}: ‚ùå Tipo desconocido: {tipo}")
            return False
        
        if success:
            logger.info(f"   {nombre}: ‚úÖ (registrado exitosamente)")
        else:
            logger.warning(f"   {nombre}: ‚ö†Ô∏è (registro fall√≥)")
        
        return success
        
    except Exception as e:
        logger.warning(f"   {nombre}: ‚ùå Error: {e}")
        return False

def init_aurora_system_controlled() -> Tuple[bool, Any]:
    """
    Inicializa el sistema Aurora de manera controlada e inteligente
    
    Returns:
        Tuple[bool, Any]: (√©xito, director_instance)
    """
    
    logger.info("üöÄ Iniciando sistema Aurora V7 con arranque controlado inteligente")
    
    try:
        # PASO 1: Importar interfaces y factory primero
        logger.info("üì¶ Paso 1: Importando interfaces y factory...")
        from aurora_interfaces import TipoComponenteAurora, EstadoComponente
        from aurora_factory import aurora_factory
        
        # Esperar un momento para que el auto-registro termine
        time.sleep(0.1)
        
        # PASO 2: Verificar estado actual del factory
        logger.info("üîç Paso 2: Verificando estado actual del factory...")
        
        try:
            stats_inicial = aurora_factory.obtener_estadisticas()
            motores_existentes = aurora_factory.listar_motores_disponibles()
            gestores_existentes = aurora_factory.listar_gestores_disponibles()
            analizadores_existentes = aurora_factory.listar_analizadores_disponibles()
            
            logger.info(f"   üìä Estado inicial:")
            logger.info(f"      Componentes totales: {stats_inicial.get('total_registrados', 0)}")
            logger.info(f"      Motores: {len(motores_existentes)}")
            logger.info(f"      Gestores: {len(gestores_existentes)}")
            logger.info(f"      Analizadores: {len(analizadores_existentes)}")
            
        except Exception as e:
            logger.warning(f"   ‚ö†Ô∏è No se pudo obtener estad√≠sticas iniciales: {e}")
            motores_existentes = []
            gestores_existentes = []
            analizadores_existentes = []
        
        # PASO 3: Registro inteligente de componentes cr√≠ticos
        logger.info("üè≠ Paso 3: Registro inteligente de componentes cr√≠ticos...")
        
        # Componentes cr√≠ticos - verificar y registrar solo si es necesario
        componentes_criticos = [
            ("neuromix_super_unificado", "motor", "neuromix_definitivo_v7", "NeuroMixSuperUnificadoRefactored"),
            ("harmonicEssence_v34", "motor", "harmonicEssence_v34", "HarmonicEssenceV34Refactored"),
            ("emotion_style_profiles", "gestor", "emotion_style_profiles", "GestorPresetsEmocionalesRefactored")
        ]
        
        resultados_criticos = []
        for nombre, tipo, modulo, clase in componentes_criticos:
            resultado = registrar_componente_inteligente(aurora_factory, nombre, tipo, modulo, clase)
            resultados_criticos.append(resultado)
        
        # PASO 4: Registro inteligente de componentes opcionales
        logger.info("üîß Paso 4: Registro inteligente de componentes opcionales...")
        
        componentes_opcionales = [
            ("neuromix_aurora_v27", "motor", "neuromix_aurora_v27", "AuroraNeuroAcousticEngineV27"),
            ("hypermod_v32", "motor", "hypermod_v32", "HyperModV32"),
            ("objective_manager", "gestor", "objective_manager", "ObjectiveManagerUnificado"),
            ("carmine_analyzer", "analizador", "Carmine_Analyzer", "CarmineAuroraAnalyzer"),
            ("aurora_quality_pipeline", "analizador", "aurora_quality_pipeline", "AuroraQualityPipeline")
        ]
        
        resultados_opcionales = []
        for nombre, tipo, modulo, clase in componentes_opcionales:
            resultado = registrar_componente_inteligente(aurora_factory, nombre, tipo, modulo, clase)
            resultados_opcionales.append(resultado)
        
        # PASO 5: Verificar estado final del factory
        logger.info("üìà Paso 5: Verificando estado final del factory...")
        
        try:
            stats_final = aurora_factory.obtener_estadisticas()
            motores_finales = aurora_factory.listar_motores_disponibles()
            gestores_finales = aurora_factory.listar_gestores_disponibles()
            analizadores_finales = aurora_factory.listar_analizadores_disponibles()
            
            logger.info(f"   üìä Estado final:")
            logger.info(f"      Componentes totales: {stats_final.get('total_registrados', 0)}")
            logger.info(f"      Motores disponibles: {len(motores_finales)}")
            logger.info(f"      Gestores disponibles: {len(gestores_finales)}")
            logger.info(f"      Analizadores disponibles: {len(analizadores_finales)}")
            
        except Exception as e:
            logger.warning(f"   ‚ö†Ô∏è No se pudo obtener estad√≠sticas finales: {e}")
        
        # PASO 6: Crear director CON detecci√≥n deshabilitada inicialmente
        logger.info("üéØ Paso 6: Creando Aurora Director (modo pasivo)...")
        
        # Importar director DESPU√âS de que factory est√© listo
        from aurora_director_v7 import AuroraDirectorV7Refactored
        
        # Crear director - ahora ya no hace detecci√≥n autom√°tica
        director = AuroraDirectorV7Refactored()
        
        # PASO 7: Inicializar detecci√≥n desde el Director (√öNICO PUNTO)
        logger.info("‚öôÔ∏è Paso 7: Inicializando detecci√≥n desde Director (punto √∫nico)...")
        
        exito_deteccion = director.inicializar_deteccion_completa()
        
        if not exito_deteccion:
            logger.error("‚ùå Detecci√≥n fall√≥")
            return False, None
        
        # PASO 8: Configurar modo seg√∫n componentes cargados
        logger.info("üéõÔ∏è Paso 8: Configurando modo de operaci√≥n...")
        
        num_motores = len(director.motores)
        num_gestores = len(director.gestores)
        
        logger.info(f"   ‚úÖ Detecci√≥n completada:")
        logger.info(f"      üöó Motores activos: {num_motores}")
        logger.info(f"      üõ†Ô∏è Gestores activos: {num_gestores}")
        logger.info(f"      üéØ Modo de orquestaci√≥n: {director.modo_orquestacion.value}")
        logger.info(f"      üéµ Estrategia default: {director.estrategia_default.value}")
        
        # PASO 9: Validaci√≥n final del sistema
        logger.info("üî¨ Paso 9: Validaci√≥n final del sistema...")
        
        # Verificar que los componentes cr√≠ticos est√©n funcionando
        componentes_funcionando = 0
        
        try:
            # Test b√°sico de cada motor
            for nombre_motor, motor in director.motores.items():
                if motor and hasattr(motor, 'get_info'):
                    info = motor.get_info()
                    logger.debug(f"      ‚úÖ {nombre_motor}: {info.get('nombre', 'OK')}")
                    componentes_funcionando += 1
                else:
                    logger.warning(f"      ‚ö†Ô∏è {nombre_motor}: motor no responde")
        except Exception as e:
            logger.warning(f"   ‚ö†Ô∏è Error en validaci√≥n de motores: {e}")
        
        logger.info(f"   üéâ Sistema validado: {componentes_funcionando} componentes operativos")
        
        logger.info("‚úÖ Sistema Aurora V7 inicializado correctamente con arranque inteligente")
        
        return True, director
        
    except Exception as e:
        logger.error(f"‚ùå Error en arranque controlado: {e}")
        logger.error(f"   Tipo de error: {type(e).__name__}")
        
        # Log de traceback para debug
        import traceback
        logger.debug(f"   Traceback: {traceback.format_exc()}")
        
        return False, None

def verificar_salud_sistema(director) -> Dict[str, Any]:
    """
    Verifica la salud general del sistema despu√©s del arranque
    
    Args:
        director: Instancia del director de Aurora
        
    Returns:
        Dict con informaci√≥n de salud del sistema
    """
    
    logger.info("üè• Verificando salud del sistema...")
    
    salud = {
        "timestamp": time.time(),
        "sistema_operativo": True,
        "componentes": {},
        "warnings": [],
        "errores": [],
        "puntuacion_salud": 0.0
    }
    
    try:
        # Verificar director
        if director:
            salud["componentes"]["director"] = {
                "estado": "operativo",
                "motores": len(director.motores),
                "gestores": len(director.gestores)
            }
        else:
            salud["errores"].append("Director no disponible")
            salud["sistema_operativo"] = False
        
        # Calcular puntuaci√≥n de salud
        total_componentes = len(salud["componentes"])
        componentes_ok = sum(1 for comp in salud["componentes"].values() 
                           if comp.get("estado") == "operativo")
        
        if total_componentes > 0:
            salud["puntuacion_salud"] = componentes_ok / total_componentes
        else:
            salud["puntuacion_salud"] = 0.0
        
        # Determinar estado general
        if salud["puntuacion_salud"] >= 0.8:
            logger.info("   üíö Salud del sistema: EXCELENTE")
        elif salud["puntuacion_salud"] >= 0.6:
            logger.info("   üíõ Salud del sistema: BUENA")
        elif salud["puntuacion_salud"] >= 0.4:
            logger.info("   üß° Salud del sistema: REGULAR")
        else:
            logger.warning("   ‚ù§Ô∏è Salud del sistema: CR√çTICA")
        
    except Exception as e:
        logger.error(f"‚ùå Error verificando salud: {e}")
        salud["errores"].append(f"Error en verificaci√≥n: {e}")
        salud["sistema_operativo"] = False
    
    return salud

# ===============================================================================
# EJECUCI√ìN PRINCIPAL
# ===============================================================================

if __name__ == "__main__":
    print("\n" + "="*70)
    print("üöÄ AURORA V7 - ARRANQUE CONTROLADO INTELIGENTE")
    print("="*70)
    print("üß™ Testeando arranque controlado de Aurora V7...")
    
    # Ejecutar arranque controlado
    exito, director = init_aurora_system_controlled()
    
    if exito and director:
        print("\n" + "="*70)
        print("‚úÖ ARRANQUE EXITOSO")
        print("="*70)
        
        # Verificar salud del sistema
        salud = verificar_salud_sistema(director)
        
        print(f"\nüìä Resumen final:")
        print(f"   Sistema operativo: {'‚úÖ' if salud['sistema_operativo'] else '‚ùå'}")
        print(f"   Puntuaci√≥n de salud: {salud['puntuacion_salud']:.1%}")
        print(f"   Componentes activos: {len(salud['componentes'])}")
        
        if salud["warnings"]:
            print(f"   ‚ö†Ô∏è Warnings: {len(salud['warnings'])}")
        
        if salud["errores"]:
            print(f"   ‚ùå Errores: {len(salud['errores'])}")
        
        print("\nüéâ Aurora V7 listo para crear experiencias neuroac√∫sticas!")
        
    else:
        print("\n" + "="*70)
        print("‚ùå ARRANQUE FALLIDO")
        print("="*70)
        print("\nüîß Revisa los logs para diagnosticar el problema.")
        print("üí° Sugerencia: Verifica que todos los m√≥dulos est√©n disponibles.")
    
    print("\n" + "="*70)
